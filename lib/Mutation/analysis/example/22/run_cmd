#! /bin/bash 

# Can run this from top dir, which contain inputs in directory 'inputs'

# Example run:  SKIP_TASKS="" GIVEN_CONF_SCRIPT=<link> bash run_cmd <topdir containing input> <config file> [<onHPC>]
# tasksList = [ZESTI_DEV_TASK, TEST_GEN_TASK, SEMU_EXECUTION, COMPUTE_TASK, ANALYSE_TASK]
# SKIP_TASKS="" GIVEN_CONF_SCRIPT= bash ~/mytools/klee-semu/src/lib/Mutation/analysis/example/22/run_cmd . ~/mytools/klee-semu/src/lib/Mutation/analysis/example/22/run_cmd.cfg

set -u 

error_exit()
{
    echo "@CMD-Error: $1"
    exit 1
}


#TODO: Change here ######################################
#Config DIR 
configdir='/media/thierry/0630b405-f70d-48dc-ba06-3f3b6af08b44/home/shadowvm/shadow/tmpTCT/TMP-Corebench/workspace/metactrl/<MFI_ID>'
configfile='<MFI_ID>_conf-script.conf'
if [ "${GIVEN_CONF_SCRIPT:-}" != "" ]
then
    configfile=$(basename $GIVEN_CONF_SCRIPT)
    configdir=$(dirname $(readlink -f $GIVEN_CONF_SCRIPT))
else
    error_exit "it is mandatory to pas 'GIVEN_CONF_SCRIPT' env var"
fi
##########################################################

if [ $# = 3 ]; then
    [ "$2" = "onHPC" ] || error_exit "the only accepted 2nd argument is onHPC to skip zesti"
    configdir=$intopdir/'hpcConfigDir'
    configfile=`ls $configdir | grep 'conf-script.conf'`        # assume only on
    [ `echo $configfile | tr ' ' '\n' | wc -l` -eq 1 ] || error_exit "HPC config file not found or more than 1 found"
    SKIP_TASKS=`echo ${SKIP_TASKS:-} | sed '1iZESTI_DEV_TASK' | sort -u | xargs`
elif [ $# != 2 ]; then
    error_exit "expected two or one argument: <Proj Topdir containing folder 'inputs'> <runConfig> <onHPC>?"
fi

PROJ_TOPDIR=$(readlink -f $1)
intopdir=$PROJ_TOPDIR/'inputs'
outtopdir=$PROJ_TOPDIR/

runConfigurationFile=$(readlink -f $2)
test -f $runConfigurationFile || error_exit "missing run configuration file: $runConfigurationFile"

test -d $intopdir || { echo "intopdir not existing: $intopdir"; exit 1; }

# extra Args, such as execution Mode: EXTRA_ARGS='--executionMode GenTestsToKill'
extraargs=''
if [ "${EXTRA_ARGS:-}" != "" ]
then
    extraargs="$EXTRA_ARGS"
fi

# Check if want to skip some task
skipargs=""
if [ "${SKIP_TASKS:-}" != "" ]
then
    echo "@CMD-Warning: Skipping tests: $SKIP_TASKS!"
    for s in $SKIP_TASKS; do
        skipargs+=" --skip_completed $s"
    done
fi

#echo $skipargs
cd $configdir || { echo "Couldn't find config dir"; exit 1; }
. $configfile || error_exit "Failed to source MFI config $configfile"
cd - > /dev/null

# Useful for tests having skip ... where we want to not skip in replay mode..
export EKLEEPSE_REPLAY_TOOL=$MFI_PROGRAM

cd $(dirname $runConfigurationFile) || error_exit "cannot enter runConfigurationFile's directory"
. $(basename $runConfigurationFile) || error_exit "Failed to source $runConfigurationFile"
cd - > /dev/null

# SEMU and ZESTI dir
semudir="$SEMU_CFG_SEMU_EXE_DIR"
test -d  "$semudir" || error_exit "SEMU dir not existing: '$semudir'"
ScriptDir=`readlink -f $semudir/../../src/lib/Mutation/analysis/` || \
    ScriptDir=`readlink -f $semudir/../../../src/lib/Mutation/analysis/`
test -d  "$ScriptDir" || error_exit "Script dir not existing: '$ScriptDir'"

zestidir="$SEMU_CFG_ZESTI_EXE_DIR"
PATH=$PATH:$semudir

klee_tests_topdir="$intopdir/genktests/GenKTESTS"
if [ -d $klee_tests_topdir ]; then
    klee_tests_topdir="--klee_tests_topdir $klee_tests_topdir"
else
    klee_tests_topdir=""
fi

printf "\n>> CMD calling run.py\n\n"

python $ScriptDir/run.py $outtopdir $skipargs $extraargs \
$klee_tests_topdir \
--exepath $(readlink -f $MFI_EXEDIR/$MFI_PROGRAM) \
--runtest $MFI_RUNTESTSCRIPT \
--testlist $MFI_TCSFILE \
--martout $intopdir/mutantsdata \
--matrix $intopdir/matrices/SM.dat \
--passfail $intopdir/matrices/ktestPassFail.txt \
--coverage $intopdir/matrices/MCOV.dat \
--zesti_exe_dir $zestidir \
--llvmgcc_exe_dir $SEMU_CFG_LLVMGCC_EXE_DIR \
--llvm27_exe_dir $SEMU_CFG_LLVM27_EXE_DIR \
--covTestThresh $SEMU_CFG_COVERAGE_THERSHOLD \
--testSampleMode $SEMU_CFG_TEST_SAMPLE_MODE \
--testSamplePercent $SEMU_CFG_TEST_SAMPLE_PERCENTAGE \
--semutimeout $SEMU_CFG_SEMU_TIMEOUT \
--semumaxmemory $SEMU_CFG_SEMU_MAXMEMORY \
--semupreconditionlength "$SEMU_CFG_SEMU_PRECONDITION_LENGTH" \
--semumutantmaxfork "$SEMU_CFG_SEMU_MUTANT_MAX_FORK" \
--semumaxtestsgenpermutants "$SEMU_CFG_SEMU_MAX_TESTS_PER_MUTANTS" \

